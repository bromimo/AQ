<?php

/*
      Запрос-пример для демонстрации подходов при разработке AlefQuery сервера
      ?alef_action=example
  */

class RequestExample extends AlefRequest
{
    /*
     * Константы ниже генерируются авоматически на основе примера ответа на запрос.
     * В каких-то случаях они вам не понадобятся, например, если данные возвращаются
     * полностью из sql-запроса и уже имеют необходимые ключи.
     * Если вы дописываете в массив ответа что-то собственными руками – используйте эти константы.
     *
     * */
    const KEY_SOME_TEXT = "some_text";
    const KEY_STATUS = "status";
    const KEY_USER_ID_AFTER_REVOKE = "user_id_after_revoke";

    /*
     *
     * Этот метод являетсяя точкой входа в реализуемый вами запрос. Он вызывается
     * с переданными в реквест параметрами сразу после предварительной обработки.
     * На этапе предварительной обработки отбрасывается служебный параметр language,
     * а также параметры, связанные с подписью безопасности запроса. Остальные параметры
     * передаются без изменений.
     *
     * */
    public function executeRequest($phone, $pass)
    {
        $phone = (string) $phone; // телефон в международном формате, начинающийся с кода страны, без плюса и других символов ||| Пример значения: 79155556688
        $pass = (string) $pass; // пароль ||| Пример значения: lo9_ca7People60

        // Пишите код только ниже этой строки, чтобы избежать конфликтов при git merge

        /*
         * Работа со строками и локализация.
         *
         * Независимо от того, есть ли на данный момент поддержка нескольких языков в проекте, при работе со строками,
         * предназначенными для пользователя всегда объявляйте константы, для этого используйте:
         * 1) файл strings.php
         * 2) префикс STR_ перед названием константы
         * 3) функцию _localize();
         *
         * В стандартном случае, когда локализация не нужна, значения, заданные в strings.php будут возвращены без изменений.
         * Подробнее о работе с локализацией написано в файле resources/strings/readme.txt
         * Если локализация в проекте есть – автоматически будет возвращено локализованное значение
         *
         * */
        $res[self::KEY_SOME_TEXT] = _localize(STR_EXAMPLE_PHRASE);

        /*
         * Чтобы авторизовать пользователя используйте $this->grantAccess($user_id);
         *
         * */

        // Если логин или пароль не подошли, будет выброшен эксепшн, который автоматически обернется в json-ответ сервера. Если в проекте используется локализация, текст ошибки также будет локализован
        if($phone!="79999999999" || $pass!="123456")
        {
            throw new AlefException(ERR_AUTH_FAILED);
        }

        $this->grantAccess(123); // передавайте в эту функцию ID пользователя, которого вы авторизуете

        /*
         * в дальнейшем идентификатор авторизованного пользователя можно получить с помощью $this->getCurrentUserId();
         * чтобы узнать id текущего пользователя пользуйтесь только этим методом, не пытайтесь самостоятельно доставать его из сессии
         *
         */

        $res[USER_ID] = $this->getCurrentUserId();

        $this->revokeAccess();
        $res[self::KEY_USER_ID_AFTER_REVOKE] = $this->getCurrentUserId();

        /*
         * Любой запрос должен возвращать статус. status = 0 – это статус успешного завершения запроса.
         * Любой status отличный от 0 свидетельствует об ошибке и одновременно является кодом ошибки (никакого дополнительного поля error_code не существует)
         *
         * Единтсвенным правильным способом вернуть статус отличный от 0 является throw new AlefException($code,[$developer_message])
         * $code – цифровой код ошибки. Для его передачи всегда используйте константу из файла errors.php,
         * начинающуюся с перфикса ERR_. В свежесгенерированном проекте уже будут обозначены несколько стандартных констант.
         * Если ни одна из существующих не подходит, заведите новую, соблюдая правила именования и местонахождение (errors.php)
         *
         * $developer_message – опциональный параметр в конструкторе AlefException, туда может быть передан stacktrace или какая-то
         * информация полезная для программиста, но не касающаяся пользователя. Такая информация попадет в поле
         * developer_message в результрующем ответе (на боевых серверах в целях безопасности
         * этот параметр всегда принудительно удаляется из ответа)
         *
         * * */
        $res[KEY_STATUS] = 0;
        return $res;
    }


    /*
     * Эта функция генерируется полностью автоматически. По умолчанию в сгенерированном сервере все запросы
     * возвращают ответ-заглушку, заданную в AQGen. Не меняйте этот код и не удаляйте его даже после того как заглушка станет не нужна.
     * Иначе возникнут мердж-конфликты.
     * */
    public function getStub()
    {
        $res = json_decode('{
    "some_text" : "Hello!",
    "status": 0
}', true);
        return $res;
    }
}
